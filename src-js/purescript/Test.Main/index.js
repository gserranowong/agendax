// Generated by purs version 0.13.8
"use strict";
var Control_Bind = require("../Control.Bind/index.js");
var CoreGrid = require("../CoreGrid/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_Identity = require("../Data.Identity/index.js");
var Data_Show = require("../Data.Show/index.js");
var Data_Symbol = require("../Data.Symbol/index.js");
var Effect_Aff = require("../Effect.Aff/index.js");
var Test_Spec = require("../Test.Spec/index.js");
var Test_Spec_Assertions = require("../Test.Spec.Assertions/index.js");
var Test_Spec_Reporter_Console = require("../Test.Spec.Reporter.Console/index.js");
var Test_Spec_Runner = require("../Test.Spec.Runner/index.js");
var main = Effect_Aff.launchAff_(Test_Spec_Runner.runSpec([ Test_Spec_Reporter_Console.consoleReporter ])(Test_Spec.describe(Data_Identity.monadIdentity)("CoreGrid defines basic state logic for grids.")(Control_Bind.discard(Control_Bind.discardUnit)(Test_Spec.bindSpecT(Data_Identity.bindIdentity))(Test_Spec.it(Data_Identity.monadIdentity)(Test_Spec.exampleMUnit)("1 create 1 1 grid cell")((function () {
    var expectedcell = [ {
        is_active: false,
        is_selected: false,
        position: {
            h: 1,
            v: 1
        }
    } ];
    return Test_Spec_Assertions.shouldEqual(Effect_Aff.monadThrowAff)(Data_Show.showArray(Data_Show.showRecord()(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
        return "is_active";
    }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
        return "is_selected";
    }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
        return "position";
    }))(Data_Show.showRecordFieldsNil)(Data_Show.showRecord()(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
        return "h";
    }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
        return "v";
    }))(Data_Show.showRecordFieldsNil)(Data_Show.showInt))(Data_Show.showInt))))(Data_Show.showBoolean))(Data_Show.showBoolean))))(Data_Eq.eqArray(Data_Eq.eqRec()(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowNil)()(new Data_Symbol.IsSymbol(function () {
        return "position";
    }))(Data_Eq.eqRec()(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowNil)()(new Data_Symbol.IsSymbol(function () {
        return "v";
    }))(Data_Eq.eqInt))()(new Data_Symbol.IsSymbol(function () {
        return "h";
    }))(Data_Eq.eqInt))))()(new Data_Symbol.IsSymbol(function () {
        return "is_selected";
    }))(Data_Eq.eqBoolean))()(new Data_Symbol.IsSymbol(function () {
        return "is_active";
    }))(Data_Eq.eqBoolean))))(expectedcell)(CoreGrid.initializeGrid(1)(1));
})()))(function () {
    return Test_Spec.it(Data_Identity.monadIdentity)(Test_Spec.exampleMUnit)("active 1 cell grid")((function () {
        var expectedcell = [ {
            is_active: true,
            is_selected: true,
            position: {
                h: 1,
                v: 1
            }
        } ];
        return Test_Spec_Assertions.shouldEqual(Effect_Aff.monadThrowAff)(Data_Show.showArray(Data_Show.showRecord()(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
            return "is_active";
        }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
            return "is_selected";
        }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
            return "position";
        }))(Data_Show.showRecordFieldsNil)(Data_Show.showRecord()(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
            return "h";
        }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
            return "v";
        }))(Data_Show.showRecordFieldsNil)(Data_Show.showInt))(Data_Show.showInt))))(Data_Show.showBoolean))(Data_Show.showBoolean))))(Data_Eq.eqArray(Data_Eq.eqRec()(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowNil)()(new Data_Symbol.IsSymbol(function () {
            return "position";
        }))(Data_Eq.eqRec()(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowNil)()(new Data_Symbol.IsSymbol(function () {
            return "v";
        }))(Data_Eq.eqInt))()(new Data_Symbol.IsSymbol(function () {
            return "h";
        }))(Data_Eq.eqInt))))()(new Data_Symbol.IsSymbol(function () {
            return "is_selected";
        }))(Data_Eq.eqBoolean))()(new Data_Symbol.IsSymbol(function () {
            return "is_active";
        }))(Data_Eq.eqBoolean))))(expectedcell)(CoreGrid.next(CoreGrid.initializeGrid(1)(1))({
            begin: {
                h: 1,
                v: 1
            },
            end: {
                h: 1,
                v: 1
            }
        }));
    })());
}))));
module.exports = {
    main: main
};
